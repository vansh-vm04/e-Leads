generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  role          Role      @default(User)
  buyers        Buyer[]
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]

  history BuyerHistory[] @relation("UserChanges")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Buyer {
  id           String       @id @default(uuid())
  fullName     String       @db.VarChar(80)
  email        String?      @unique
  phone        String       @unique @db.VarChar(15)
  city         City
  propertyType PropertyType
  bhk          BHK?
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     TimeLine
  source       Source
  status       Status       @default(New)
  notes        String?      @db.VarChar(1000)
  tags         String[]     @default([])
  ownerId      String
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())

  owner     User           @relation(fields: [ownerId], references: [id])
  histories BuyerHistory[]

  @@map("buyers")
}

model BuyerHistory {
  id        String   @id @default(uuid())
  buyerId   String
  changedBy String
  changedAt DateTime @default(now())
  diff      Json

  buyer Buyer @relation(fields: [buyerId], references: [id])
  user  User  @relation("UserChanges", fields: [changedBy], references: [id])

  @@map("buyer_history")
}

enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum BHK {
  One
  Two
  Three
  Four
  Studio
}

enum Purpose {
  Buy
  Rent
}

enum TimeLine {
  M0_3      @map("0-3m")
  M3_6      @map("3-6m")
  GT6       @map(">6m")
  Exploring
}

enum Source {
  Website
  Referral
  Walk_in  @map("Walk-in")
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}

enum Role {
  User
  Admin
}
